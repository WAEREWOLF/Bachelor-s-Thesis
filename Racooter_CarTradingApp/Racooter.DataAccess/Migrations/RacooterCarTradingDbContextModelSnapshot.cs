// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Racooter.DataAccess;

namespace Racooter.DataAccess.Migrations
{
    [DbContext(typeof(RacooterCarTradingDbContext))]
    partial class RacooterCarTradingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LogicModel.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthenticatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AuthenticatedUserId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("LogicModel.Announcement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthenticatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthenticatedUserId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthenticatedUserId2")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Images")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsAproved")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("SpecificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthenticatedUserId");

                    b.HasIndex("AuthenticatedUserId1");

                    b.HasIndex("AuthenticatedUserId2");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("SpecificationId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("LogicModel.AuthenticatedUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Credits")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("GetState")
                        .HasColumnType("int");

                    b.Property<Guid?>("HistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NrOfAnnouncements")
                        .HasColumnType("int");

                    b.Property<Guid?>("PersonalDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PersonalDataId");

                    b.ToTable("AuthenticatedUsers");
                });

            modelBuilder.Entity("LogicModel.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthenticatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("NewsPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthenticatedUserId");

                    b.HasIndex("NewsPostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("LogicModel.Description", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Descriptions");
                });

            modelBuilder.Entity("LogicModel.History", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("LogicModel.HistoryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsBuy")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SpecificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("HistoryId");

                    b.HasIndex("SpecificationId");

                    b.ToTable("HistoryItems");
                });

            modelBuilder.Entity("LogicModel.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Block")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Coordinates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("LogicModel.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("LogicModel.Moderator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthenticatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AuthenticatedUserId");

                    b.ToTable("Moderators");
                });

            modelBuilder.Entity("LogicModel.NewsPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Dislikes")
                        .HasColumnType("int");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<Guid?>("ModeratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("ModeratorId");

                    b.ToTable("NewsPosts");
                });

            modelBuilder.Entity("LogicModel.PersonalData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GetUserType")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PersonalDatas");
                });

            modelBuilder.Entity("LogicModel.Specification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BodyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Emissions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GearBox")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GetFuelType")
                        .HasColumnType("int");

                    b.Property<bool>("HadAccident")
                        .HasColumnType("bit");

                    b.Property<bool>("HasABS")
                        .HasColumnType("bit");

                    b.Property<bool>("HasCruiseControl")
                        .HasColumnType("bit");

                    b.Property<bool>("HasDualZoneClimate")
                        .HasColumnType("bit");

                    b.Property<bool>("HasESP")
                        .HasColumnType("bit");

                    b.Property<bool>("HasElectricMirrors")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFullElectricWin")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHeatedSeats")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHeatedStWheel")
                        .HasColumnType("bit");

                    b.Property<bool>("HasLogHistory")
                        .HasColumnType("bit");

                    b.Property<bool>("HasVentedSeats")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWarranty")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFullOptions")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNegotiable")
                        .HasColumnType("bit");

                    b.Property<string>("Make")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mileage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NrOfDoors")
                        .HasColumnType("int");

                    b.Property<string>("Power")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specifications");
                });

            modelBuilder.Entity("LogicModel.Admin", b =>
                {
                    b.HasOne("LogicModel.AuthenticatedUser", "AuthenticatedUser")
                        .WithMany()
                        .HasForeignKey("AuthenticatedUserId");
                });

            modelBuilder.Entity("LogicModel.Announcement", b =>
                {
                    b.HasOne("LogicModel.AuthenticatedUser", null)
                        .WithMany("Announcements")
                        .HasForeignKey("AuthenticatedUserId");

                    b.HasOne("LogicModel.AuthenticatedUser", null)
                        .WithMany("FavouriteAnouncements")
                        .HasForeignKey("AuthenticatedUserId1");

                    b.HasOne("LogicModel.AuthenticatedUser", null)
                        .WithMany("RecomAnouncements")
                        .HasForeignKey("AuthenticatedUserId2");

                    b.HasOne("LogicModel.Description", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId");

                    b.HasOne("LogicModel.Specification", "Specification")
                        .WithMany()
                        .HasForeignKey("SpecificationId");
                });

            modelBuilder.Entity("LogicModel.AuthenticatedUser", b =>
                {
                    b.HasOne("LogicModel.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("LogicModel.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("LogicModel.PersonalData", "PersonalData")
                        .WithMany()
                        .HasForeignKey("PersonalDataId");
                });

            modelBuilder.Entity("LogicModel.Comment", b =>
                {
                    b.HasOne("LogicModel.AuthenticatedUser", "AuthenticatedUser")
                        .WithMany()
                        .HasForeignKey("AuthenticatedUserId");

                    b.HasOne("LogicModel.NewsPost", null)
                        .WithMany("Comments")
                        .HasForeignKey("NewsPostId");
                });

            modelBuilder.Entity("LogicModel.HistoryItem", b =>
                {
                    b.HasOne("LogicModel.Description", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId");

                    b.HasOne("LogicModel.History", null)
                        .WithMany("HistoryItems")
                        .HasForeignKey("HistoryId");

                    b.HasOne("LogicModel.Specification", "Specification")
                        .WithMany()
                        .HasForeignKey("SpecificationId");
                });

            modelBuilder.Entity("LogicModel.Message", b =>
                {
                    b.HasOne("LogicModel.AuthenticatedUser", "Recipient")
                        .WithMany("Message")
                        .HasForeignKey("RecipientId");
                });

            modelBuilder.Entity("LogicModel.Moderator", b =>
                {
                    b.HasOne("LogicModel.AuthenticatedUser", "AuthenticatedUser")
                        .WithMany()
                        .HasForeignKey("AuthenticatedUserId");
                });

            modelBuilder.Entity("LogicModel.NewsPost", b =>
                {
                    b.HasOne("LogicModel.Admin", null)
                        .WithMany("NewsPosts")
                        .HasForeignKey("AdminId");

                    b.HasOne("LogicModel.Moderator", null)
                        .WithMany("NewsPosts")
                        .HasForeignKey("ModeratorId");
                });
#pragma warning restore 612, 618
        }
    }
}
